'use strict'

require.paths.unshift __dirname + '/lib/node'

# TODO: make 'development' come from environment
settings = require('./config').development
Object.defineProperty global, 'settings',
	get: () -> settings

fs = require 'fs'
Compose = require 'compose'

run = require('./server').run
Store = require('./store/store').Store

Model = (entity, store, overrides) ->
	Compose.create store, overrides
#Model = (entity, store, overrides...) ->
#	Compose.create.apply Compose, store, overrides

#Facet = (model, expose...) ->
#	facet = {}
#	expose.forEach (name) ->
#		facet[name] = Compose.from(model, name).bind model
#	Object.freeze Compose.create {}, facet

#Facet = (model, expose...) ->
#	#console.log 'DEFINE? FACET:', model, expose
#	facet = {}
#	expose.forEach (m) ->
#		facet[m] = model[m].bind model if model[m]
#	#console.log 'DEFINED FACET:', facet
#	Object.freeze facet

#PermissiveFacet = (model, expose...) ->
#	args = ['find', 'get', 'add', 'save', 'patch', 'remove']
#	args.unshift model
#	args = args.concat expose
#	Facet.apply model, args

PermissiveFacet = (model, expose...) ->
	facet = {}
	['find', 'get', 'add', 'save', 'patch', 'remove'].forEach (m) ->
		facet[m] = model[m]?.bind model # if model[m]
		#facet[m] = Compose.from(model, m).bind model
	#expose.forEach (m) ->
	#	#facet[m] = model[m].bind model if model[m]
	#	facet[m] = Compose.from(model, m).bind model
	#console.log 'DEFINED FACET:', Object.freeze facet
	#Object.freeze Object.create {dermo:true}, facet
	Object.freeze facet

#RestrictiveFacet = (model, expose...) ->
#	args = ['find', 'get']
#	args.unshift model
#	args = args.concat expose
#	Facet.apply model, args

facets =
	public: {}
	user: {}
	admin: {}

model = {}

######################################
################### Tests
######################################

'''
model.Bar = Model 'Bar', Store('Bar'),
	find1: (query) ->
		console.log 'FINDINTERCEPTED!'
		# TODO: sugar?
		@__proto__.find (query or '') + '&a!=null'
	find: Compose.around (base) ->
		(query) ->
			console.log 'BEFOREFIND', arguments
			wait base.call(@, (query or '') + '&a!=null'), (result) ->
				result.forEach (doc) ->
					doc._version = 2
					doc = Object.veto doc, ['id']
				console.log 'AFTERFIND', result
				result
	#find: Compose.before (query) ->
	#	console.log 'BEFOREFIND', arguments
	#	[(query or '') + '&a!=null']
	#find: Compose.after (promise) ->
	#	console.log 'AFTERFIND', arguments
	#	promise
	foos1: () -> @find "foo!=null"
'''

######################################
################### User
######################################

encryptPassword = (password, salt) ->
	sha1(salt + password + settings.security.secret)

# secure admin accounts
for k, v of settings.security.admins
	v.salt = nonce()
	v.password = encryptPassword v.password, v.salt

model.User = Model 'User', Store('User'),
	get: (id) ->
		return null unless id
		wait @__proto__.get(id), (user) ->
			if not user
				user = settings.security.admins[id] or null
			user
	add: null
	update: null
	save: null
	remove: null
	drop: null
	patch: (query, changes) ->
		return URIError 'Please be more specific' unless query
		id = parseQuery(query).normalize().pk
		return URIError 'Can not set passwords in bulk' if changes.password isnt undefined and not id
		#return URIError 'Use signup to create new user' unless user.id
		if changes.password
			# TODO: password changed, notify the user
			# TODO: notify only if changed OK!
			# create salt, hash salty password
			changes.salt = nonce()
			console.log 'PASSWORD SET TO', changes.password
			changes.password = encryptPassword changes.password, changes.salt
		# TODO: limit access rights in changes not higher than of current user
		@__proto__.patch query, changes
	login: (data, method, context) ->
		return null unless method is 'POST'
		#console.log 'LOGIN', arguments
		data ?= {}
		wait @get(data.user), (user) =>
			if not user
				if data.user
					# invalid user
					#console.log 'BAD'
					context.save null
					false
				else
					# log out
					#console.log 'LOGOUT'
					context.save null
					user: {}
			else
				if not user.password or not user.active
					# not been activated
					#console.log 'INACTIVE'
					context.save null
					false
				else if user.password is encryptPassword data.pass, user.salt
					# log in
					#console.log 'LOGIN'
					session =
						id: nonce()
						user:
							id: user.id
							email: user.email
							access: user.access
					session.expires = new Date(15*24*60*60*1000 + (new Date()).valueOf()) if data.remember
					context.save session
					sid: session.id, user: session.user
				else
					context.save null
					false
	signup: (data, method, session) ->
		return null unless method is 'POST'
		data ?= {}
		Step @, [
			() ->
				@get data.user
			(user) ->
				return SyntaxError 'Already exists' if user
				# TODO: password set, notify the user
				# TODO: notify only if added OK!
				# create salt, hash salty password
				salt = nonce()
				console.log 'PASSWORD SET TO', data.pass
				password = encryptPassword data.pass, salt
				#console.log 'HERE', salt, password
				# TODO: activation!
				@__proto__.add
					id: data.user
					password: password
					salt: salt
					email: data.email
					regDate: Date.now()
					type: data.type
					active: true
			(user) ->
				#console.log 'USER', user
				user
		]

	addAffiliate: (data, method, context) ->
		data ?= {}
		data.type = 1
		@signup data, method, context
	addMerchant: (data, method, context) ->
		data ?= {}
		data.type = 2
		@signup data, method, context
	addAdmin: (data, method, context) ->
		data ?= {}
		data.type = 999
		@signup data, method, context
	findAffiliates: (query) ->
		# TODO: get rid of "or ''"; may be query.append()?
		# TODO: how to append vetoing select()
		@__proto__.find Query(query).eq('type', 1).ne('_deleted', true)
	findMerchants: (query) ->
		@__proto__.find Query(query).eq('type', 2).ne('_deleted', true)
	findAdmins: (query) ->
		@__proto__.find Query(query).eq('type', 999).ne('_deleted', true)
	patchAffiliates: (query, changes) ->
		# TODO: veto some changes
		# p(model.User.findAffiliates())
		@patch Query(query).eq('type', 1), changes
	patchMerchants: (query, changes) ->
		# TODO: veto some changes
		@patch Query(query).eq('type', 2), changes
	patchAdmins: (query, changes) ->
		# TODO: veto some changes
		@patch Query(query).eq('type', 999), changes
	__removeTyped: (query, type) ->
		@patch Query(query).eq('type', type), active: false, _deleted: true
	removeAffiliates: (query) -> @__removeTyped query, 1
	removeMerchants: (query) -> @__removeTyped query, 2
	removeAdmins: (query) -> @__removeTyped query, 999

model.Session = Model 'Session', Store('Session'),
	# look for a saved session, attach .save() if found
	lookup: (req, res) ->
		sid = req.getSecureCookie 'sid'
		Step @, [
			() ->
				@get sid
			(session) ->
				session ?= user: {}
				#console.log 'SESSIN!' + sid, session
				Object.defineProperties session,
					save:
						value: (value) =>
							#console.log 'SESSOUT' + sid, value
							options = {path: '/', httpOnly: true}
							if value
								# user logged in --> store new session and set the cookie
								sid = value.id
								options.expires = value.expires if value.expires
								#console.log 'MAKESESS', value
								@add value
								res.setSecureCookie 'sid', sid, options
							else
								# user logged out --> remove the session and the cookie
								#console.log 'REMOVESESS', @
								@remove id: sid
								res.clearCookie 'sid', options
		]

######################################
################### Misc
######################################

#model.Course = Model 'Course', require('./store/remote')()

######################################
################### FACETS
######################################

#class WebRootPublic
#WebRootPublic = Compose {foo: 'bar'},
#WebRootPublic = Compose.call _.clone(foo: 'bar'),
WebRootPublic = Compose.create {foo: 'bar'},
	find: () ->
		console.log 'ROOTQUERIED'
		return true
		templates = []
		# TODO: make async?
		# TODO: employ View Store?
		fs.readdirSync(settings.server.views).forEach (filename) ->
			return unless filename.match /\.html$/
			return if filename is 'index.html'
			data = fs.readFileSync "#{settings.server.views}/#{filename}", 'utf8'
			name = filename.replace '.html', ''
			templates.push "<script id=\"tmpl_#{name}\" type=\"text/x-jquery-tmpl\">#{data}</script>"
		index = fs.readFileSync "#{settings.server.views}/index.html", 'utf8'
		text = index.replace '[[[@@@]]]', templates.join ''
		# atomically form index.html
		if not settings.debug
			fs.writeFileSync "#{settings.server.static.dir}/index.html~", text
			fs.renameSync "#{settings.server.static.dir}/index.html~", "#{settings.server.static.dir}/index.html"
		text
	home: (data, method, session) ->
		#s = {}
		#for k, v of session
		#	s[k] = v?.schema?.get?._value or v?.schema?._value or {id: k, properties: {}, type: 'object'}
		#	s[k].id ?= k
		s = _.keys session.context
		#s = session.context
		# JSONP answer for RequireJS
		'define('+JSON.stringify(user: session.user, model: s)+');'
	login: model.User.login.bind model.User
	signup: model.User.signup.bind model.User

#class WebRootUser extends WebRootPublic
#WebRootUser = Compose WebRootPublic,
#WebRootUser = Compose.call _.clone(WebRootPublic),
WebRootUser = Compose.create WebRootPublic,
	Course: null #model.Course #Facet model.Course, 'find', 'get'

#class WebRootAdmin extends WebRootUser
#WebRootAdmin = Compose WebRootUser,
#WebRootAdmin = Compose.call _.clone(WebRootUser),
WebRootAdmin = Compose.create WebRootUser,
	#Bar: PermissiveFacet model.Bar #, 'foos2'
	User: PermissiveFacet model.User, 'addAffiliate', 'addMerchant', 'addAdmin'

#facets.public = new WebRootPublic
#facets.user = new WebRootUser
#facets.admin = new WebRootAdmin
facets.public = WebRootPublic
facets.user = WebRootUser
facets.admin = WebRootAdmin

# TODO: remove from global
global.model = model
global.facets = facets
console.log 'FAC', facets.admin

############################

wait waitAllKeys(model), (_facets) ->
	# run
	app = Object.create require('events').EventEmitter.prototype,
		getUserLevel:
			value: (user) ->
				# settings.server.disabled disables guest or vanilla user interface
				# TODO: watchFile ./down to control settings.server.disabled
				if settings.server.disabled and not settings.security.admins[user.id]
					level = 'none'
				else if settings.security.bypass or settings.security.admins[user.id]
					level = 'admin'
				else if user.id
					level = 'user'
				else
					level = 'public'
				level
		getModel:
			value: (user) ->
				level = @getUserLevel user
				context = facets[level] or {}
				# TODO: more advanced separation
				context
		getSession:
			value: (req, res) ->
				wait model.Session.lookup(req, res), (session) =>
					Object.defineProperties session,
						context:
							get: () ->
								level = app.getUserLevel session.user
								'''
				if user.write
					admin = facets.admin
					#for k in user.write.split /\W+/
					for k in user.write
						context[k].schemaPut = admin[k].schemaPut if admin[k].schemaPut
						context[k].put = admin[k].put if admin[k].put
						context[k].delete = admin[k].delete if admin[k].delete
								'''
								#console.log 'SSSS', level, facets[level]
								context = facets[level] or {}
		#handler: handler
	run app
